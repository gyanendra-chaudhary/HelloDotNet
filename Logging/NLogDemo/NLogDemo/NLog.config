<?xml version="1.0" encoding="utf-8"?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.s3.org/2001/XMLSchema-instance"
      autoReload="true"
      internalLogLevel="Information"
      internalLogFile="internal-nlog.txt"
      throwConfigExceptions="true">
    <!-- Define various log targets where logs will be written -->
    <targets>
        
        <!--
         AsyncWrapper: Buffers log events and writes them asyncronously
         -->
        <target xsi:type="AsyncWrapper" name="asyncFileWrapper">
            
            <!-- 
            Log to SQL Server
            commandText: Specifies the SQL command to insert log entries into the LogFiles table
            @data: The timestamp of the log events
            @level: The log level(e.g., Info, Error)
            @logger: Theme of the logger.
            @message: The log message
            @exception: Execution details, if any
            -->
            <target xsi:type="Database" name="database"
                    connectionString="Server=(localdb)\MSSQLLocalDB;Database=LogDB;Trusted_Connection=True;TrustServerCertificate=True;MultipleActiveResultSets=true;"
                    commandText="INSERT INTO NLogEntries (Date, Level, Message, Logger, Exception, UniqueId, ServerIP, ApplicationName) VALUES (@date, @level, @message, @logger, @exception, @uniqueId, @serverIP, @applicationName)">
                <!-- Parameter mapping -->
                <parameter name="@date" layout="${date}" />
                <parameter name="@level" layout="${level:uppercase=true}" />
                <parameter name="@logger" layout="${logger}" />
                <parameter name="@message" layout="${message}" />
                <parameter name="@exception" layout="${exception:tostring}" />
                <parameter name="@uniqueId" layout="${event-properties:item=UniqueId}" />
                <parameter name="@serverIP" layout="202.166.217.210" />
                <parameter name="@applicationName" layout="NLogDemoApplication" />
            </target>
        
        <!--
            type="File":File target. Write logs to a text file.
            name="file": Name for this target. Rule section will use this name while defining rules.
            fileName="D:/Logs/nlog-all-${shortdate}.log": Path to the file where logs will be saved with date-based naming.
              layout: Log format with date, level, logger (fully qualified class name), message (actual log message), and exception details if any.
        -->
        <!-- <target xsi:type="File" -->
        <!--         name="file" -->
        <!--         fileName="D:/Logs/nlog-all-${shortdate}.log" -->
        <!--         archiveFileName="D:/Logs/archived/log_{#}.log" -->
        <!--         archiveEvery="Day" -->
        <!--         archiveNumbering = "Rolling" -->
        <!--         archiveAboveSize = "10485760" -->
        <!--         maxArchiveFiles = "7" -->
        <!--         layout="${longdate}|${level:uppercase=true}|${logger}|${message} ${exception:format=ToString}" -->
        <!-- /> -->
        </target>
        
        <!--
           type="Console: Console target. Display logs in the console window.
           name="console": Name for this target. Rule section will use this name while defining rules.
           layout: Format similar to file target. If you want you can give a different format
         -->
        <target xsi:type="Console"
                name="console"
                layout="${longdate}|${level:uppercase=true}|${logger}|${message} ${exception:format=ToString}"/>
        <!--
            type="Null": Null target. Discard logs, used to filter out logs from specific namespaces.
            name="blackhole": Any logs sent to this target will be ignore or discarded.
         -->
        <target xsi:type="Null" name="blackhole"/>
    </targets>

    <!-- Define logging rules to control which logs go to which targets. Define rules for each target -->
    <rules>
        <!--
        Ignore logs from Microsoft and System namespaces by sending them to the "blackhole" target
        name="Microsoft.*": Microsoft and its related namespaces
        minlevel="Information": Minimum log level, capturing all logs from Information level upwards.
        writeTo="blackhole": Send logs to the blackhole target to ignore them
        final="true": Stop further processing of logs that match this rule
      -->
        <logger name="Microsoft.*"
                minlevel="Information"
                writeTo="blackhole"
                final="true"/>
        <!-- Filter out logs from the "System" namespace by sending them to the "blackhole" target. 
        This is similar to Microsoft namespace -->

        <!-- Send all logs with level Information or higher to the database target -->
        <logger name="*" minlevel="Information" writeTo="database" />
        <!-- 
         Send all logs with level Debug or higher to the console target
         name="*": Apply this rule to all loggers or you can say all namespaces
         minlevel="Debug": Minimum log level is Debug
         writeTo="console": Send matching logs to the "console" target
        -->
        <logger name="*"
                minlevel="Information"
                writeTo="console"/>
    </rules>
</nlog>